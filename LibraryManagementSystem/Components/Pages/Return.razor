@page "/return"
@using LibraryManagementSystem.DatabaseManager
@using LibraryManagementSystem.Models.Users
@using LibraryManagementSystem.Models;
@using LibraryManagementSystem.Models.Items;

<div>
    <h3>@err</h3>
    <h2>Return item</h2>

    <div style="display: flex; flex-direction: column; gap: 10px;">


        <div>
            <label>Item id: </label>
            <input @bind="itemId" min="1" type="number" />
            <button @onclick="ContinueFromItemIdInput">Continue</button>

            <h3>@statusBookNotFound</h3>

            @if (!string.IsNullOrEmpty(rentalInfo))
            {
                <p style="font-size: 20px;">@rentalInfo.ToString()</p>

                <input type="date" @bind="todayDate"/>

            @if (todayDate.HasValue) {

                <button style="width: fit-content" @onclick="ReturnItem">Return</button>
                <p style="font-size: 20px;">Penalty: $ @penalty</p>
}
            }

        </div>
    </div>
</div>

@code {
private int? itemId;
    private string? rentalInfo = "";
    private string? statusBookNotFound, err;
    private static LibraryItem? item;
    private double? penalty;
    private DateTime? todayDate;

    private void ContinueFromItemIdInput()
    {
        try
        {
            if (itemId.HasValue)
            {
                item = LibraryItemsManager.GetItem(itemId.Value);

                if (!item.IsAvailable)
                {
                    if (item is Book)
                    {
                        Book book = (Book)item;
                      
                        rentalInfo = $"{book.Borrower.FirstName} {book.Borrower.LastName} borrowed {book.Title}";
                    }
                    if (item is DVD)
                    {
                        DVD dvd = (DVD)item;

                        rentalInfo = $"{dvd.Borrower.FirstName} {dvd.Borrower.LastName} borrowed {dvd.Title} at {dvd.BorrowDate.Value.ToShortDateString()}. Due at {dvd.ReturnDate.Value.ToShortDateString()}";
                    }
                    }
                    else
                    {
                        statusBookNotFound = "Item is not borrowed";
                    }

                }
            }
catch (Exception ex)
        {
            err = ex.Message;
        }
    }

    private void ReturnItem()
    {
        if (itemId.HasValue && todayDate.HasValue)
        {
            penalty = BorrowItemsManager.HandleReturn(itemId.Value, todayDate.Value);
        }
    }
}